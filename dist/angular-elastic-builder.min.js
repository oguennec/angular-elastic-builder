!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap","angularMoment"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){var n=t.data;t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"and",rules:[]})},t.$watch("data.needsUpdate",function(a){a&&(t.filters=e.toFilters(n.query,t.data.fields),t.data.needsUpdate=!1)}),t.$watch("filters",function(a){a&&(n.query=e.toQuery(t.filters,t.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(n){return e.compile(n,function(e,n,a){var l=e.depth=+a.depth,r=e.item;e.getGroupClassName=function(){var e=l;return"group"===r.type&&e++,t(e)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e,t){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(n){return e.compile(n,function(e,n,a){var l=e.depth=+a.depth,r=e.group;e.addRule=function(){r.rules.push({})},e.addGroup=function(){r.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){r.rules.splice(e,1)},e.getGroupClassName=function(){return t(l+1)}})}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,n=e.rule.field;if(t&&n)return"boolean"===t[n].subType?"boolean":t[n].type}}}}])}(window.angular),function(e){"use strict";var t=e.module("angular-elastic-builder");t.directive("elasticType",["$filter","moment",function(e,t){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(n){function a(e){var t=e.date,n=e.mode;return"day"===n&&(0===t.getDay()||6===t.getDay())}n.getTemplateUrl=function(){var e=n.type;if(e)return e=e.charAt(0).toUpperCase()+e.slice(1),"angular-elastic-builder/types/"+e+".html"},n.booleans=["False","True"],n.booleansOrder=["True","False"],n.inputNeeded=function(){var e=["equals","notEquals","gt","gte","lt","lte"];return~e.indexOf(n.rule.subType)},n.numberNeeded=function(){var e=["last","next"];return~e.indexOf(n.rule.subType)},n.clear=function(){n.rule.date=null},n.dateOptions={dateDisabled:a,formatYear:"yyyy",maxDate:new Date(2018,1,13),minDate:new Date,startingDay:1},n.open1=function(){n.popup1.opened=!0},n.formatDate=function(e){if(n.rule.format){var a=n.rule.format,l=a.replace(/(yyyy|yy|d|dd|ddd)/g,function(e){return e.toUpperCase()}),r=t(e,l);return r.toDate(l)}},n.formatDate(e,n.rule.value),n.setDate=function(){n.rule.format&&(n.rule.date=n.formatDate(n.rule.value),n.date=n.rule.date)},n.setDate(),n.formats=["yyyy-MM-ddTHH:mm:ss","yyyy-MM-dd","yyyyMMdd","dd-MMMM-yyyy","yyyy/MM/dd","shortDate"],n.rule.hasOwnProperty("format")&&(n.format=n.rule.format),n.altInputFormats=["M!/d!/yyyy"],n.popup1={opened:!1}}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var t=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return t[e%t.length]}})}(window.angular),function(e){"use strict";function t(e,t){var n=e.map(a.bind(e,t));return n}function n(e,t,n){var a=e.map(l.bind(e,t,n)).filter(function(e){return!!e});return a}function a(t,n,l){l!==!1&&(l=!0);var i=Object.keys(n)[0],u={or:"group",and:"group",range:"number"},o=u[i]||"item",d=r(o);switch(i){case"or":case"and":d.rules=n[i].map(a.bind(n,t)),d.subType=i;break;case"missing":case"exists":d.field=n[i].field,d.subType={exists:"exists",missing:"notExists"}[i],delete d.value;break;case"term":d.field=Object.keys(n[i])[0],d.value=n[i][d.field];var p=t[Object.keys(n[i])[0]];"date"===p.type?(d.subType="equals",d.format=s(n.term.format)):(d.subType=l?"equals":"notEquals",d.value=n[i][d.field],"number"==typeof d.value&&(d.subType="boolean"));break;case"terms":d.field=Object.keys(n[i])[0];var p=t[Object.keys(n[i])[0]];if("multi"===p.type){var c=n[i][d.field];"string"==typeof c&&(c=[c]),d.values=p.choices.reduce(function(e,t){return e[t]=-1!==n[i][d.field].indexOf(t),e},{})}else d.subType=l?"equals":"notEquals",d.value=n[i][d.field],"number"==typeof d.value&&(d.subType="boolean");break;case"range":var f;d.field=Object.keys(n[i])[0],d.subType=Object.keys(n[i][d.field])[0];var p=t[Object.keys(n[i])[0]];if("date"===p.type){if(n[i][d.field].format){for(var m in n[i][d.field])"format"!==m?(f=n[i][d.field][m],d.value=f):d.format=s(n[i][d.field].format);break}if(e.isDefined(Object.keys(n[i][d.field])[1])){if(f=n[i][d.field].gte,~f.indexOf("now-")){d.subType="last",d.value=parseInt(f.split("now-")[1].split("d")[0]);break}if(~f.indexOf("now")){d.subType="next",f=n[i][d.field].lte,d.value=parseInt(f.split("now+")[1].split("d")[0]);break}}}if("number"===p.type&&e.isNumber(n[i][d.field][d.subType])){d.value=n[i][d.field][d.subType];break}case"not":d=a(t,n[i].filter,!1);break;default:d.field=Object.keys(n[i])[0]}return d}function l(t,n,a){var r={};if("group"===a.type)return r[a.subType]=a.rules.map(l.bind(a,t,n)).filter(function(e){return!!e}),r;var s=a.field,o=t[s];if(s){switch(o.type){case"term":if("boolean"===o.subType&&(a.subType="boolean"),!a.subType)return;switch(a.subType){case"equals":case"boolean":if(void 0===a.value)return;r.term={},r.term[s]=a.value;break;case"notEquals":if(void 0===a.value)return;r.not={filter:{term:{}}},r.not.filter.term[s]=a.value;break;case"exists":r.exists={field:s};break;case"notExists":r.missing={field:s};break;default:throw new Error("unexpected subtype "+a.subType)}break;case"number":r.range={},r.range[s]={},r.range[s][a.subType]=a.value;break;case"date":if(!a.subType)return;switch(a.subType){case"equals":if(!e.isDate(a.date))return;r.term={},r.term[s]=i(n,a.date,a.format),r.term.format=u(a.format);break;case"lt":case"lte":if(!e.isDate(a.date))return;r.range={},r.range[s]={},r.range[s][a.subType]=i(n,a.date,a.format),r.range[s].format=u(a.format);break;case"gt":case"gte":if(!e.isDate(a.date))return;r.range={},r.range[s]={},r.range[s][a.subType]=i(n,a.date,a.format),r.range[s].format=u(a.format);break;case"last":if(!e.isNumber(a.value))return;r.range={},r.range[s]={},r.range[s].gte="now-"+a.value+"d",r.range[s].lte="now";break;case"next":if(!e.isNumber(a.value))return;r.range={},r.range[s]={},r.range[s].gte="now",r.range[s].lte="now+"+a.value+"d";break;case"exists":r.exists={field:s};break;case"notExists":r.missing={field:s};break;default:throw new Error("unexpected subtype "+a.subType)}break;case"multi":r.terms={},r.terms[s]=Object.keys(a.values||{}).reduce(function(e,t){return a.values[t]&&e.push(t),e},[]);break;default:throw new Error("unexpected type")}return r}}function r(t){var n={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:"",format:""},number:{field:"",subType:"",value:null}};return e.copy(n[t])}function i(t,n,a){if(!e.isDate(n))return!1;var l=t("date")(n,a);return l}function u(t){return e.isString(t)&&(t=t.replace(/(THH)/g,"'T'HH")),t}function s(t){return e.isString(t)&&(t=t.replace(/(\'T\'HH)/g,"THH")),t}e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,a){return n(t,a,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="list-group form-inline">\n      <div\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="list-group-item actions">\n        <a class="btn btn-xs btn-primary" title="Add Rule" data-ng-click="addRule()">\n          <i class="fa fa-plus"></i>\n        </a>\n        <a class="btn btn-xs btn-primary" title="Add Group" data-ng-click="addGroup()">\n          <i class="fa fa-list"></i>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="list-group-item elastic-builder-chooser"\n  data-ng-class="getGroupClassName()">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-group">\n  <h5>If\n    <select data-ng-model="group.subType" class="form-control">\n      <option value="and">all</option>\n      <option value="or">any</option>\n    </select>\n    of these conditions are met\n  </h5>\n  <div\n    data-ng-repeat="rule in group.rules"\n    data-elastic-builder-chooser="rule"\n    data-elastic-fields="elasticFields"\n    data-depth="{{ +depth + 1 }}"\n    data-on-remove="removeChild($index)"></div>\n\n  <div class="list-group-item actions" data-ng-class="getGroupClassName()">\n    <a class="btn btn-xs btn-primary" title="Add Sub-Rule" data-ng-click="addRule()">\n      <i class="fa fa-plus"></i>\n    </a>\n    <a class="btn btn-xs btn-primary" title="Add Sub-Group" data-ng-click="addGroup()">\n      <i class="fa fa-list"></i>\n    </a>\n  </div>\n\n  <a class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </a>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <select class="form-control" data-ng-model="rule.field" data-ng-options="key as key for (key, value) in elasticFields"></select>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/Boolean.html",'<span class="boolean-rule">\n  Equals\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <select\n    data-ng-model="rule.value"\n    class="form-control"\n    data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n  </select>\n</span>\n'),e.put("angular-elastic-builder/types/Date.html",'<span class="date-rule form-inline">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="Exact">\n      <option value="equals">=</option>\n    </optgroup>\n    <optgroup label="Unbounded-range">\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n    </optgroup>\n    <optgroup label="Bounded-range">\n      <option value="last">In the last</option>\n      <option value="next">In the next</option>\n    </optgroup>\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">! Exists</option>\n    </optgroup>\n  </select>\n\n  <div class="form-group">\n    <div class="input-group">\n      <input data-ng-if="inputNeeded()"\n        type="text"\n        class="form-control"\n        data-uib-datepicker-popup="{{ rule.format }}"\n        data-ng-model="rule.date"\n        data-is-open="popup1.opened"\n        data-datepicker-options="dateOptions"\n        data-ng-required="true"\n        data-close-text="Close" />\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default" ng-click="open1()" data-ng-if="inputNeeded()">\n          <i class="fa fa-calendar"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <span class="form-inline">\n    <div class="form-group">\n      <label data-ng-if="inputNeeded()">Format</label>\n      <select\n        class="form-control"\n        data-ng-model="rule.format"\n        data-ng-if="inputNeeded()"\n        ng-options="f for f in formats"></select>\n    </div>\n  </span>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-if="rule.value ? rule.value = rule.value : rule.value = 1" data-ng-model="rule.value" min=0> days\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/Multi.html",'<span class="multi-rule">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/Number.html",'<span class="number-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="Numeral">\n      <option value="equals">=</option>\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n    </optgroup>\n\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">! Exists</option>\n    </optgroup>\n  </select>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/Term.html",'<span class="elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="Text">\n      <option value="equals">Equals</option>\n      <option value="notEquals">! Equals</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">! Exists</option>\n    </optgroup>\n\n  </select>\n  <input\n    data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n')}])}(window.angular);